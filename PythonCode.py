# -*- coding: utf-8 -*-
"""提出用コード.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JpEbKb-kYst3hAwiiH42_NcEWTHmGIP7

Key Finder
"""

!pip install lxml
!pip install cssselect
!pip install mecab-python3==0.996.5
!pip install beautifulsoup4

import requests  
import lxml.html 
import time 
from bs4 import BeautifulSoup
import urllib.request as req
import sys
import MeCab


keyword=new_uniqued

T = list()
for i in keyword:
  sesstion = requests.Session()  
  response= sesstion.get("https://www.google.co.jp/search?num=10&q="+ i) 
  response.content
  root= lxml.html.fromstring(response.content) 

  def query_string_remove(url1):
     return url1[:url1.find('&')]

  for a in root.cssselect('div.kCrYT > a'):  
    url= a.get("href")   
    if not query_string_remove(url.replace("/url?q=",""))=="https://www.google.co.jp/search?ie=UTF-8":      
      T.append(query_string_remove(url.replace("/url?q=","")))
print(T)#検出されたURLの出力



#各webサイトのテキストから名詞と動詞を抽出(新辞書使用)

import MeCab

m = MeCab.Tagger("-Ochasen https://github.com/neologd/mecab-ipadic-neologd.git")# 新辞書

words_list=list()

for i in T:   
  
  try:
    url2= i

    headers = {
      "User-Agent": "Mozilla/.... Chrome/.... Safari/...."
        }

　　#403 Forbiddenのエラーの回避 +verify = Falseを検討
    soup = BeautifulSoup(requests.get(url2,headers = headers,allow_redirects=False).content, 'html.parser') 

    #ページ内のテキストを抽出　とMeCabで形態素化し名詞のみ書き出し
    p_list = soup.find_all("p")
    for text in p_list: 
      word=text.get_text()
      node=m.parseToNode(word)

#"名詞" or "動詞":は全ての文章になる。

      while node:
        if (node.feature.split(",")[0]=="名詞"):
          words_list.append(node.surface)

        if (node.feature.split(",")[0]=="動詞"):
          words_list.append(node.surface)

        if (node.feature.split(",")[0]=="形容詞"):
          words_list.append(node.surface)

        node=node.next

  except SSLError or ConnectionError:  #エラー処理
      pass

words_list_uniqued=list(set(words_list))

#抜き出した名詞と動詞のテキストを保存

f = open('frontengineer113vn09511902.txt', 'w')
for x in words_list:
    f.write(str(x)+",")
f.close()

"""正規表現：テキスト内におけるノイズを削除

"""

import re
import regex

with open('/content/frontengineer113vn.txt') as f: #csvファイルの選択
    v=f.read()
v1=list(map(str, v.split(",")))

#正規表現

D=[]
re_kanji = re.compile(r'^[\u4E00-\u9FD0]+$')#漢字
re_katakana = re.compile(r'[\u30A1-\u30F4ー]+')#カタカナ
re_hiragana = re.compile(r'^[あ-ん]+$')#ひらがな
re_hira_kanji= regex.compile(r'[\p{Script=Hiragana}\p{Script=Han}ー]+')#漢字とひらがな
re_english=re.compile(r'^[a-z]+')#英語

for i in v1:
  if re_kanji.fullmatch(i): 
    D.append(i)

  elif re_hiragana.fullmatch(i):
    D.append(i) 

  elif re_katakana.fullmatch(i):#カタカナ
    D.append(i) 

  elif re_hira_kanji.fullmatch(i):
    D.append(i) 
  elif re_english.fullmatch(i):#英語
    D.append(i) 

#データの保存

K=D
f = open('web__engineer_43587_new1.csv', 'w')
for x in K:
    f.write(str(x)+",")
f.close()

#ファイルの読み込み
with open("web__engineer_43587_new1.csv") as f: #csvファイルの選択
    v=f.read()
v1=list(map(str, v.split(",")))

z=v.replace(","," ")

#データの保存
K=z
f = open('w2v_data.txt', 'w')
for x in K:
    f.write(str(x))
f.close()

"""Word2vecterによる分散表現modelの作成

"""

#モデルの作成
from gensim.models import word2vec
import logging

logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
#コーパス
sentences = word2vec.Text8Corpus('w2v_data.txt')
model=word2vec.Word2Vec(sentences, sg=1, size=200, min_count=5, window=5)

#modelの保存
model.save("frontengineer17.model")

"""検証(目標に対応する、学習カテゴリの予測)"""

!pip install mecab-python3==0.996.5 #MeCab前バージョン

#分散表現(Wiki)のダウンロード
!tar -xf "/content/drive/My Drive/Colab Notebooks/20170201.tar"

#分散表現データのロードと、類似ベクトル表示
from gensim.models import KeyedVectors
model_dir = 'entity_vector/entity_vector.model.bin'
model = KeyedVectors.load_word2vec_format(model_dir, binary=True)

import MeCab
from gensim.models import word2vec
import logging
import numpy as np


#目標の文章

L="社内ルールをまとめた記事を idealump Wiki へ20本追加"

#ブラックリスト
brack_list=["さまざま","です","ため","ます","する","で","に","こと","を","し","まで","の","ような","が","よう","月","月末","半年","最低","毎日","今期","最終","現在","昨年","今月","来月","万","円","来期","件","回","年度","年","今年","性","未","ー","一","四半期","後","冊","身","上","等","奥","千","人","年間","的","数","目標","者","度","個","幅","二","未","億"]

#形態素化（Mecab,新辞書）
m = MeCab.Tagger("-Ochasen https://github.com/neologd/mecab-ipadic-neologd.git")

node=m.parseToNode(L)
words_list=list()

#目標から名詞と動詞の抜き出し
while node:
  if node.feature.split(",")[0]=="名詞":
    if not node.surface in brack_list:
      words_list.append(node.surface)
  if node.feature.split(",")[0]=="動詞":
    if not node.surface in brack_list:
      words_list.append(node.surface)
  #if node.feature.split(",")[0]=="形容詞":
    #if not node.surface in brack_list:
      #words_list.append(node.surface)


  node=node.next

print(words_list)


#分散表現モデルの読み込み
model = word2vec.Word2Vec.load("/content/it_engineerW15.model")
words=[]
w=0
num_features=200
H=[]

#カテゴリ内の登録外単語を除外
print("NoWords_カテゴリの数")
for i in H1:
  try:
    x=model[i]
    H.append(i)
  except KeyError:
    z1=i.lower()
    try:
      model[z1]
      H.append(z1)
    except KeyError: 
      #print(i)
      w=w+1
      pass

print(w)

#目標内の登録外単語を除外+大文字を小文字にds=[]
print("NoWords_目標")
for i in words_list:
  try:
    x=model[i]
    words.append(i)
  except KeyError:
    z2=i.lower()
    try:
      model[z2]
      words.append(z2)
    except KeyError: 
      print(i)
      

# 特徴ベクトルの入れ物を初期化
feature_vec = np.zeros((num_features,), dtype="float32") 

#文章内の各単語の特徴ベクトルを足して平均を出す
for word in words:
  feature_vec = np.add(feature_vec, model[word])
if len(words) > 0:
  feature_vec = np.divide(feature_vec, len(words))

#cos類似度（カテゴリーと目標の特徴ベクトルとの類似度）
def cos_sim(v1, v2):
    return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))
X=[]

#Xにカテゴリと類似度を格納
for i in H:
  s=str(cos_sim(model[i],feature_vec))
  #print(i+":"+s)
  X.extend([[s,i]])

#類似度が高い順に並び替え
X.sort(reverse=True)

#上位カテゴリ10個と類似度の出力
for i in range(10):
  categry=X[i][1]+":"+str(round(float(X[i][0]),2))
  print(categry,end=",")

"""大カテゴリーの分類

"""

#大カテゴリーの判定
from operator import itemgetter
import collections

n=int(len(Udemy_2))
K1=[]
K2=[]

#上位何個のカテゴリを範囲指定するか。
count=10
for i in range(count):
  for j in range(n):
    if X[i][1] in Udemy_2[j]:
      category=Udemy_2[j][0]+":"+str(round(float(X[i][0]),2))
      K1.append([Udemy_2[j][0],round(float(X[i][0]),2)])
      K2.append(Udemy_2[j][0])
c = collections.Counter(K2)
#print(c)

l=list(set(K2))
l2=len(l)
l0=(len(K1))
p=[]
y=0
for i in range(l2):
  for j in range(l0):
    if K1[j][0] == l[i]:
      y=y+K1[j][1]
      f=K1[j][0]
    else:
      pass
  q=f+":"+str(y)
  p.append([f,round(y, 2)])
  y=0

p.sort(key=itemgetter(1),reverse=True)
print(p)

"""学習カテゴリー（リスト）

"""

#Udemyの学習カテゴリー①(カテゴリー予測に利用)

Udemy=["ウェブ開発","web","開発","javascript","react","css","angular","php","node","wordpress","python","サイト"
,"データサイエンス","python","機械","学習","深層","学習","人工","知能","データ","分析","R","ニューラル","ネットワーク","tensorflow"
,"モバイル開発","モバイル","開発","googleflutter","android","ios","swift","react","dart","kotlin","swiftui"
,"プログラミング","python","java","c#","c++","react","javascript","c","go","spring","framework"
,"ゲーム開発","ゲーム","開発","unity","基礎","unreal","c#","3d","c++","2d","unreal","blueprints","blender"
,"データベース設計","設計","sql","mysql","oracle","mongodb","sever","apache","posgtesql","データベース"
,"ソフトウェアテスト","ソフトウェア","selenium","webdriver","java","自動テスト","apiテスト","cypress","rest","assured","python","テスト","フレームワーク"
,"ソフトウェアエンジニアリング","ソフトウェア","データ","構造","コーディング","kubernetes","アプリケーション","ソフトウェアプラクティス","アルゴリズム","マイクロサービス","python","spring","boot"
,"開発ツール","開発","ツール","docker","kubernetes","git","devops","jenkins","jira","confluence","積分","aws"
,"コードなし開発","elementor","wix","bubble","wordpress","ソフトウェア","ウェブデザイン","起業","apps","power","automate"
,"起業家精神","ビジネス","基本","基礎","戦略","オンライン","ビジネスプラン","フリーランス","ブログ","在宅ビジネス"
,"ビジネスコミュニケーション","コミュニケーション","執筆","プレゼンテーション","スピーチ","フィクションライティング","ビジネスライティング","説得力","ストーリーテリング"
,"チーム・マネジメント","製品","管理","リーダーシップ","管理能力","戦略","プロセス","管理","iso9001","アジャイル","リスク","管理","品質管理"
,"営業・販売スキル","営業","販売","技術","b2b","プレゼンテーション","linkedle","ビジネス","開発","リードジェネレーション","コールドメール","カスタマーサクセス","マネジメント"
,"ビジネス戦略","戦略","デジタルマーケティング","デジタル","ビジネスモデル","経営","コンサルティング","google","広告","イノベーション","戦略的計画","アジャイル"
,"業務オペレーション","シックスシグマ","シックスシグマグリーンベルト","サプライチェーン","ブラックベルト","ロボット","自動化","リーン","品質管理","ホワイトベルト","uipath"
,"法務知識","gdpr","契約法","法律","lgpd","データ保護","特許"
,"ビジネスアナリティクスとインテリジェンス","アナリティクス","sql","powerbi","tableau","分析","インテリジェンス","データ","モデリング","ビッグデータ"
,"人事","採用活動","雇用人材","分析","ダイバーシティ","インクルージョン","雇用法","コンフリクト","マネジメント","心の知能指数"
,"eコマース","Amazon","ドロップシッピング","shopify","woocommerce","電子商取引","受動的所得"
,"メディア活用","メディア","ポッドキャスティング","オーディオブック","執筆","ジャーナリズム","コンテンツ","seo"
,"不動産投資","住宅","ローン","ホスティング","airbnb","ファイナンス","財産管理","不動産","フリップ","マーケティング"
,"ネットワークとセキュリティ","セキュリティ","ハッカー","サイバーセキュリティ","ネットワークセキュリティ","ペネトレーション","comptia","cisco","ccna","comptia","terraform"
,"ハードウェア","電子工学","マイクロコントローラ","組み込み","システム","plc","arduino","raspberry","embedded","hmi"
,"os","linux","sever","powershell","vmware","os","開発","shell","lpic"
,"個人の生産性","時間管理","集中力","速読","目標設定","組織","習慣","ポジティブシンキング"
,"リーダーシップ","リーダー","管理能力","経営","コミュニケーション","スピーチ","コンフリクトマネジメント","聞く能力","関係構築","知能指数"
,"コミュニケーションスキル","ボイストレーニング","ボディーランゲージ","交渉","説得力","自己啓発","心理学","コミュニケーション"
,"モチベーション","習慣","個人的成功","神経科学","自制心","自信","目標設定"
,"ウェブデザイン","WordPress","css","モバイル","photoshop","html","ユーザーインターフェース","デザイン"
,"グラフィックデザインとイラストレーション","イラストレーション","グラフィック","adobe","illustrator","デッサン","デジタル絵画","indesign","キャラクター","canva","人物画"
,"デザインツール","premire","aftereffects","cad","procreate","デジタルアート","グラフィックデザイン"
,"ユーザーエクスペリエンスデザイン","ユーザーエクスペリエンス","ユーザーインターフェース","xd","figma","ウェブデザイン","製品設計","モバイルアプリ","設計","ポートフォリオ","プロトタイピング","レイアウト"
,"ゲームデザイン","unity","unreal","engine","blender","vfx","デッサン","ゲーム","開発","ピクセルアート"
,"デザイン思考","ゲーミフィケーション","イノベーション","マーケティング戦略","デジタル","絵画","スケッチノート","solidworks"
,"デジタルマーケティング","ソーシャルメディア","インターネットマーケティング","メールマーケティング","Googleアナリティクス"
,"ブランディング","ブランド","マネジメント","パーソナルブランディング","グラフィック","カスタマーサービス"
,"マーケティングの基礎","コピーライティング","戦略","分析","管理","デジタルマーケティング","マーケティング戦略","マーケティング分析","マーケティング管理","企画","ニューロマーケティング","営業技術","マーケティング計画"
,"pr","メディアトレーニング","メディア","スピーチ","ポッドキャスティング","ビジネスコミュニケーション","イベント企画"
,"広告","Facebook","mailchimp","メール","ppc","コマース","アナリティクス"
,"プロジェクト管理","pmp","pmbok","アジャイル","スクラム","pmi","capm","psm"]

#重複しているカテゴリーの削除
H1=set(Udemy)

#Udemyの学習カテゴリー②(大カテゴリー予測に利用)
Udemy_2=[["ウェブ開発","web","開発","javascript","react","css","angular","php","node","wordpress","python","サイト"]
,["データサイエンス","python","機械","学習","深層","学習","人工","知能","データ","分析","R","ニューラル","ネットワーク","tensorflow"]
,["モバイル開発","モバイル","開発","googleflutter","android","ios","swift","react","dart","kotlin","swiftui"]
,["プログラミング","python","java","c#","c++","react","javascript","c","go","spring","framework"]
,["ゲーム開発","ゲーム","開発","unity","基礎","unreal","c#","3d","c++","2d","unreal","blueprints","blender"]
,["データベース設計","設計","sql","mysql","oracle","mongodb","sever","apache","posgtesql","データベース"]
,["ソフトウェアテスト","ソフトウェア","selenium","webdriver","java","自動テスト","apiテスト","cypress","rest","assured","python","テスト","フレームワーク"]
,["ソフトウェアエンジニアリング","ソフトウェア","データ","構造","コーディング","kubernetes","アプリケーション","ソフトウェアプラクティス","アルゴリズム","マイクロサービス","python","spring","boot"]
,["開発ツール","開発","ツール","docker","kubernetes","git","devops","jenkins","jira","confluence","積分","aws"]
,["コードなし開発","elementor","wix","bubble","wordpress","ソフトウェア","ウェブデザイン","起業","apps","power","automate"]
,["起業家精神","ビジネス","基本","基礎","戦略","オンライン","ビジネスプラン","フリーランス","ブログ","在宅ビジネス"]
,["ビジネスコミュニケーション","コミュニケーション","執筆","プレゼンテーション","スピーチ","フィクションライティング","ビジネスライティング","説得力","ストーリーテリング"]
,["チーム・マネジメント","製品","管理","リーダーシップ","管理能力","戦略","プロセス","管理","iso9001","アジャイル","リスク","管理","品質管理"]
,["営業・販売スキル","営業","販売","技術","b2b","プレゼンテーション","linkedle","ビジネス","開発","リードジェネレーション","コールドメール","カスタマーサクセス","マネジメント"]
,["ビジネス戦略","戦略","デジタルマーケティング","デジタル","ビジネスモデル","経営","コンサルティング","google","広告","イノベーション","戦略的計画","アジャイル"]
,["業務オペレーション","シックスシグマ","シックスシグマグリーンベルト","サプライチェーン","ブラックベルト","ロボット","自動化","リーン","品質管理","ホワイトベルト","uipath"]
,["法務知識","gdpr","契約法","法律","lgpd","データ保護","特許"]
,["ビジネスアナリティクスとインテリジェンス","アナリティクス","sql","powerbi","tableau","分析","インテリジェンス","データ","モデリング","ビッグデータ"]
,["人事","採用活動","雇用人材","分析","ダイバーシティ","インクルージョン","雇用法","コンフリクト","マネジメント","心の知能指数"]
,["eコマース","Amazon","ドロップシッピング","shopify","woocommerce","電子商取引","受動的所得"]
,["メディア活用","メディア","ポッドキャスティング","オーディオブック","執筆","ジャーナリズム","コンテンツ","seo"]
,["不動産投資","住宅","ローン","建設","ホスティング","airbnb","ファイナンス","財産管理","不動産","フリップ","マーケティング"]
,["ネットワークとセキュリティ","セキュリティ","ハッカー","サイバーセキュリティ","ネットワークセキュリティ","ペネトレーション","comptia","cisco","ccna","comptia","terraform"]
,["ハードウェア","電子工学","マイクロコントローラ","組み込み","システム","plc","arduino","raspberry","embedded","hmi"]
,["os","linux","sever","powershell","vmware","os","開発","shell","lpic"]
,["個人の生産性","時間管理","集中力","速読","目標設定","組織","習慣","ポジティブシンキング"]
,["リーダーシップ","リーダー","管理能力","経営","コミュニケーション","スピーチ","コンフリクトマネジメント","聞く能力","関係構築","知能指数"]
,["コミュニケーションスキル","ボイストレーニング","ボディーランゲージ","交渉","説得力","自己啓発","心理学","コミュニケーション"]
,["モチベーション","習慣","個人的成功","神経科学","自制心","自信","目標設定"]
,["ウェブデザイン","WordPress","css","モバイル","アプリ","photoshop","html","ユーザー","インターフェース","デザイン","レイアウト"]
,["グラフィックデザインとイラストレーション","イラストレーション","グラフィック","adobe","illustrator","デッサン","デジタル絵画","indesign","キャラクター","canva","人物画"]
,["デザインツール","premire","aftereffects","cad","procreate","デジタルアート","グラフィックデザイン"]
,["ユーザーエクスペリエンスデザイン","ユーザーエクスペリエンス","ユーザー","インターフェース","xd","figma","ウェブデザイン","製品設計","モバイルアプリ","設計","ポートフォリオ","プロトタイピング"]
,["ゲームデザイン","unity","unreal","engine","blender","vfx","デッサン","ゲーム","開発","ピクセルアート"]
,["デザイン思考","ゲーミフィケーション","イノベーション","マーケティング戦略","デジタル","絵画","スケッチノート","solidworks"]
,["デジタルマーケティング","ソーシャルメディア","インターネットマーケティング","メールマーケティング","Googleアナリティクス"]
,["ブランディング","ブランド","マネジメント","パーソナルブランディング","グラフィック","カスタマーサービス"]
,["マーケティングの基礎","コピーライティング","戦略","分析","管理","デジタルマーケティング","マーケティング戦略","マーケティング分析","マーケティング管理","企画","ニューロマーケティング","営業技術","マーケティング計画"]
,["pr","メディアトレーニング","メディア","スピーチ","ポッドキャスティング","ビジネスコミュニケーション","イベント企画"]
,["広告","Facebook","mailchimp","メール","ppc","コマース","アナリティクス"]
,["プロジェクト管理","pmp","pmbok","アジャイル","スクラム","pmi","capm","psm"]]

